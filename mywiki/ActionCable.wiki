
ActionCable is divided up into 'channels'.  Each channel is responsible for transmitting a specific kind of data to/from the client/server.

To create a channel:
  $ rails generate channel <channel name> <channel method>..
Example:
  $ rails generate channel room speak

Next, go to <channel name>.coffee under javascripts/ and we can do the client
side javascript methods here.  At the bottom it gives us our <channel method>
names we listed during the generation.  Here we can add a (data) to add in
arguments for our methods.  It also will say @perform <channel method name>.
This is referring to our method in the channel controller.  Here, we can add
arguments to the channel controller function.

Example:
  received: (data) ->
    document.getElementById('messages').innerHTML+= "<p>#{data}</p>"
    # if you rendered a template from server and sending it here,
    #  you dont need to put html into it, its pre-made
    document.getElementById('messages').innerHTML+= data

  speak: (message) ->
    @perform 'speak', message: message

Next, we need to go to <channel name>_channel.rb.  This is where our controller
methods lie.  We need to change a few things first, however.

Example:
  class RoomChannel < ApplicationCable::Channel
    def subscribed
      stream_from "room_channel"
    end
    
    def unsubscribed
      # Any cleanup needed when channel is unsubscribed
    end
    
    def speak(data)
      Message.create content: data['message']
    end
  end

--------------------------------------------------------------------------------------

Using Devise with Actioncable:
  You will need to modify the file '[[channels/application_cable/connection.rb]]' to this:
  
module ApplicationCable
  class Connection < ActionCable::Connection::Base
    identified_by :current_user

    def connect
      self.current_user = find_verified_user
      logger.add_tags 'ActionCable', current_user.email
    end

    protected

    def find_verified_user # this checks whether a user is authenticated with devise
      if verified_user = env['warden'].user
        verified_user
      else
        reject_unauthorized_connection
      end
    end
  end
end

--------------------------------------------------------------------------------------

Now, we need to specify a background job to create our Message.create record.  We will do this by creating a rails background job:
  $ rails generate job BroadcastMessage
Then we will go into the Message model:
  class Message < ApplicationRecord
    after_create_commit { BroadcastMessageJob.perform_later self }
  end

Next, we go to broadcast_message_job.rb and write the code that performs
this action for us:
  def perform(message)
    ActionCable.server.broadcast 'room_channel', render_message(message)
  end
  
  private
    def render_message(message)
      ApplicationController.renderer.render message
    end


