#!/bin/bash

function Install {
  # Programs with no additional work
  ##########################################
    if [[ "$isDebian" =~ ^/ ]]; then
      sudo apt update && sudo apt -y upgrade
      sudo apt install -y \
        curl \
        htop \
        silversearcher-ag \
        tree \
        nodejs libpq-dev \
        chromium-browser \

    elif [[ "$isArch" =~ ^/ ]]; then
      sudo pacman -Syu
      sudo pacman -S \
        base \
        base-devel \
        curl \
        htop \
        the_silver_searcher \
        tree \
        nodejs \
        ttf-freefont \
        chromium \

    fi
  ##########################################

  # Programs with additional work needed
  # These include custom dotfiles!
  ######################################
    install_git
    install_openssh
    #install_docker_debian_only
    #install_docker_compose_debian_only
    #install_heroku_debian_only
    install_fzf
    install_termite
    install_rvm_arch_only
    install_xorg_arch_only
    install_i3_gaps_arch_only # depends on xorg
    install_vbox # only if inside VirtualBox!
    install_neovim_tmux

    # MUST BE LAST!
    install_zsh_and_oh_my_zsh
  ######################################
}

# Additional work installs below
################################

isDebian=$(type -P apt-get)
isArch=$(type -P pacman)

function install_git {
  if [[ "$isDebian" =~ ^/ ]]; then
    sudo apt install -y git
  elif [[ "$isArch" =~ ^/ ]]; then
    sudo pacman -S git
  fi

  # Git custom dotfiles
  ln -s $HOME/bin/dotfiles/git/gitconfig $HOME/.gitconfig
}

function install_neovim_tmux {
  if [[ "$isDebian" =~ ^/ ]]; then
    sudo apt install -y neovim tmux
  elif [[ "$isArch" =~ ^/ ]]; then
    sudo pacman -S neovim tmux
  fi

  # Neovim custom dotfiles
  mkdir -p ~/.local/share/nvim/site/autoload/
  mkdir -p ~/.config/nvim/
  echo ':source $MYNVIMPATH/init.vim' > $HOME/.config/nvim/init.vim
  git clone https://github.com/junegunn/vim-plug.git $HOME/.local/share/nvim/site/autoload/vim-plug
  cp $HOME/.local/share/nvim/site/autoload/vim-plug/plug.vim $HOME/.local/share/nvim/site/autoload/.
  rm -Rf $HOME/.local/share/nvim/site/autoload/vim-plug

  # Tmux custom dotfiles
  echo '# Path to tmux config file' > $HOME/.tmux.conf
  echo 'source-file $MYTMUXPATH/tmux_bindings' >> $HOME/.tmux.conf
}

function install_openssh {
  if [[ "$isDebian" =~ ^/ ]]; then
    sudo apt install -y openssh-server
  elif [[ "$isArch" =~ ^/ ]]; then
    sudo pacman -S openssh
  fi
  sudo systemctl restart ssh
}

function install_fzf {
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  $HOME/.fzf/install
}

function install_zsh_and_oh_my_zsh {
  if [[ ! "$(which zsh)" =~ ^/ ]]; then

    if [[ "$isDebian" =~ ^/ ]]; then
      sudo apt -y install zsh
    elif [[ "$isArch" =~ ^/ ]]; then
      sudo pacman -S zsh zsh-completions
    fi
    chsh -s $(which zsh)

    read -p "You must type exit at the next prompt to finish install!" en
 
    # Install oh-my-zsh, THIS MUST BE INSTALLED LAST!
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

    # Install custom dotfiles
    echo '# Turn off tmux' > $HOME/.zshrc
    echo 'export NO_TMUX="true"' >> $HOME/.zshrc
    echo '# Create dotfiles directory variable' >> $HOME/.zshrc
    echo 'export DOTFILES_PATH="$HOME/bin/dotfiles"' >> $HOME/.zshrc
    echo '# Source zshrc' >> $HOME/.zshrc
    echo 'source $DOTFILES_PATH/bash/bashrc' >> $HOME/.zshrc

  fi
}

function install_rvm_arch_only {
  if [[ "$isArch" =~ ^/ ]]; then
    curl -L get.rvm.io > rvm-install && bash < ./rvm-install
    rm rvm-install
  fi
}

function install_docker_debian_only {
  if [[ "$isDebian" =~ ^/ ]]; then
    sudo apt -y install docker.io
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo groupadd docker
    sudo gpasswd -a $USER docker
  fi
}

function install_docker_compose_debian_only {
  if [[ "$isDebian" =~ ^/ ]]; then
    sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
  fi
}

function install_termite {
  if [[ "$isArch" =~ ^/ ]]; then
    sudo pacman -S termite
    mkdir -p $HOME/.config/termite
    ln -s $HOME/bin/dotfiles/termite/config $HOME/.config/termite/config
  fi
}

function install_heroku_debian_only {
  if [[ "$isDebian" =~ ^/ ]]; then
    sudo snap install heroku --classic
    ln -s /snap/bin/heroku /usr/bin/heroku
  fi
}

function install_xorg_arch_only {
  if [[ "$isArch" =~ ^/ ]]; then
    sudo pacman -S xorg-server xorg-xinit
    echo "exec i3" > ~/.xinitrc
  fi
}

function install_i3_gaps_arch_only {
  if [[ "$isArch" =~ ^/ ]]; then
    sudo pacman -S i3-gaps i3status dmenu feh compton
    mkdir -p $HOME/.config/i3
    ln -s $HOME/bin/dotfiles/i3/config $HOME/.config/i3/config
    mkdir -p $HOME/Pictures
    cp $HOME/bin/dotfiles/i3/bridge01.jpg $HOME/Pictures/.
  fi
}

function install_vbox_arch_only {
  if [[ "$isArch" =~ ^/ ]]; then
    sudo pacman -S \
      virtualbox \
      virtualbox-host-modules-arch \
      linux-headers \

  fi
}

################################


# Here is where the magic happens
echo "You must have passwords set for both root and the account"
echo "that you are logged into right now.  You also must continuously"
echo "exit out of each prompt until you see 'Finished install!'."
echo "Happy installing!"
Install
echo "Finished install!"

# Done




